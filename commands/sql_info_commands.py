from discord.ext import commands
from discord.ui import Button, View
import discord
import os

@commands.command()
async def infoSQL(ctx):
    await ctx.send(
        f'Comandos SQL dispon√≠veis:\n\n'
        '- !sql_select: Mostra como realizar uma consulta de select no SQL.\n'
        '- !sql_insert: Mostra como realizar uma inser√ß√£o de dados no SQL.\n'
        '- !sql_update: Mostra como realizar uma atualiza√ß√£o de dados no SQL.\n'
        '- !sql_delete: Mostra como realizar uma exclus√£o de dados no SQL.\n'
        '- !sql_database: Mostra como criar uma database no SQL.\n'
        '- !sql_create_table: Mostra como criar uma tabela no SQL.\n'
        '- !sql_alter_table: Mostra como alterar a estrutura de uma tabela no SQL.\n'
        '- !sobre_injection: Explica sobre a vulnerabilidade SQL Injection e como se proteger.\n'
        '- !normalizacao: Explica os conceitos de normaliza√ß√£o de banco de dados.\n'
    )

@commands.command()
async def conceito_bd(ctx):
    await ctx.send(
        'üíæ **Conceitos de Banco de Dados** üíæ\n\n'
        'Aqui est√£o alguns conceitos importantes para quem trabalha com bancos de dados:\n\n'
        'üîë **Chave Prim√°ria:** A chave prim√°ria √© um campo √∫nico de uma tabela que identifica de forma exclusiva cada registro. Ela nunca pode ser duplicada.\n'
        'üìä **√çndices:** √çndices ajudam a acelerar a busca por dados nas tabelas. Eles criam uma estrutura que facilita as consultas de leitura.\n'
        'üìë **Relacionamento:** Em bancos de dados relacionais, tabelas podem ser associadas entre si. Por exemplo, uma tabela de pedidos pode ter um relacionamento com a tabela de clientes.\n\n'
        'Esses s√£o conceitos chave para a compreens√£o e otimiza√ß√£o de bancos de dados.'
    )


@commands.command()
async def normalizacao(ctx):
    await ctx.send(
        f'üîç **O que √© Normaliza√ß√£o de Banco de Dados?** üîç\n\n'
        'A normaliza√ß√£o organiza dados para reduzir redund√¢ncias e depend√™ncias.\n\n'
        '**As 3 Primeiras Formas Normais (1NF, 2NF, 3NF):**\n\n'
        'üî∂ **1¬™ Forma Normal (1NF):** Garante que cada coluna tenha valores at√¥micos, ou seja, apenas um valor por c√©lula.\n'
        'Exemplo: Em vez de armazenar m√∫ltiplos n√∫meros de telefone em uma c√©lula, crie uma linha para cada n√∫mero.\n\n'
        'üî∂ **2¬™ Forma Normal (2NF):** Elimina depend√™ncias parciais. A tabela deve estar em 1NF e todas as colunas n√£o-chave devem depender completamente da chave prim√°ria.\n'
        'Exemplo: Se uma tabela de alunos tem o nome do curso repetido, separe os dados em tabelas diferentes: uma para alunos e outra para cursos.\n\n'
        'üî∂ **3¬™ Forma Normal (3NF):** Elimina depend√™ncias transitivas. Colunas n√£o-chave devem depender apenas da chave prim√°ria.\n'
        'Exemplo: Se a tabela de clientes cont√©m dados sobre cidade e estado, separe essas informa√ß√µes em tabelas distintas.\n\n'
        '**Resumo:**\n'
        'A normaliza√ß√£o √© essencial para evitar redund√¢ncia e garantir a integridade dos dados. A 1NF, 2NF e 3NF ajudam a organizar o banco de dados de forma eficiente e segura.\n\n'
        'üí° **Dica:** Ap√≥s a 3NF, pode ser necess√°rio desnormalizar para otimizar a performance em consultas mais complexas.'
    )


@commands.command()
async def sobre_injection(ctx):
    await ctx.send(
        'üîí **O que √© SQL Injection?** üîí\n\n'
        'SQL Injection √© uma vulnerabilidade onde um atacante insere c√≥digo SQL malicioso em campos de entrada para manipular o banco de dados.\n\n'
        'üö® **Como funciona?** üö®\n\n'
        'Exemplo: em um formul√°rio de login, sem valida√ß√£o adequada, o atacante pode inserir c√≥digo SQL como:\n'
        '```sql\n'
        'usu√°rio = "admin" --\n'
        'senha = "qualquer_coisa"\n'
        '```\n'
        'Isso faz o sistema aceitar o atacante como administrador.\n\n'
        '‚ö†Ô∏è **Consequ√™ncias** ‚ö†Ô∏è\n'
        '1. Vazamento de dados sens√≠veis.\n'
        '2. Modifica√ß√£o ou exclus√£o de dados.\n'
        '3. Execu√ß√£o de comandos no servidor.\n\n'
        'üí° **Como evitar?** üí°\n'
        '1. Use **prepared statements** (exemplo em Python):\n'
        '```python\n'
        'cursor.execute("SELECT * FROM usuarios WHERE username = %s AND password = %s", (usuario, senha))\n'
        '```\n'
        '2. Valide as entradas do usu√°rio.\n'
        '3. Evite concatenar strings diretamente nas consultas.\n\n'
        'üîó **Recursos √∫teis**:\n'
        '- [OWASP SQL Injection](https://owasp.org/www-community/attacks/SQL_Injection)\n'
        '- [Django - Prote√ß√£o contra SQL Injection](https://docs.djangoproject.com/en/stable/ref/models/querysets/#sql-injection)\n'
        '‚ö†Ô∏è **Seguran√ßa nunca √© 100% garantida**, mas boas pr√°ticas reduzem riscos!'
    )


@commands.command()
async def sql_alter_table(ctx):
    await ctx.send(
        'O coelho da TI AJUDA SIM!\n\n'
        'O comando `ALTER TABLE` √© utilizado para modificar uma tabela existente.\n\n'
        '**Alterar a estrutura da tabela**:\n'
        'Voc√™ pode adicionar, excluir ou modificar colunas em uma tabela j√° existente.\n\n'
        '**Exemplo de adicionar uma coluna**:\n'
        '```sql\n'
        'ALTER TABLE clientes ADD endereco VARCHAR(255);\n'
        '```'
        '**Exemplo de modificar uma coluna**:\n'
        '```sql\n'
        'ALTER TABLE clientes ALTER COLUMN endereco SET DATA TYPE TEXT;\n'
        '```'
        '**Exemplo de excluir uma coluna**:\n'
        '```sql\n'
        'ALTER TABLE clientes DROP COLUMN endereco;\n'
        '```')

@commands.command()
async def sql_create_table(ctx):
    await ctx.send(
        'O coelho da TI AJUDA SIM!\n\n'
        'O comando `CREATE TABLE IF NOT EXISTS` √© utilizado para criar uma tabela em um banco de dados. '
        'A principal vantagem de usar o `IF NOT EXISTS` √© evitar a cria√ß√£o de uma tabela que j√° exista no banco de dados, prevenindo erros de duplica√ß√£o. '
        'Quando voc√™ usa `IF NOT EXISTS`, o banco de dados verifica se a tabela j√° existe antes de tentar cri√°-la, evitando o erro que ocorreria caso tent√°ssemos criar uma tabela com o mesmo nome de uma tabela j√° existente.\n\n'
        '**Estrutura do comando**:\n\n'
        '```sql\n'
        'CREATE TABLE IF NOT EXISTS nome_da_tabela (\n'
        '    coluna1 tipo_dado,\n'
        '    coluna2 tipo_dado,\n'
        '    coluna3 tipo_dado\n'
        ');\n'
        '```'
        '**Exemplo**:\n\n'
        'Vamos imaginar que voc√™ quer criar uma tabela chamada `clientes` para armazenar dados como nome, idade e email.\n'
        'A consulta seria:\n\n'
        '```sql\n'
        'CREATE TABLE IF NOT EXISTS clientes (\n'
        '    id SERIAL PRIMARY KEY,\n'
        '    nome VARCHAR(100),\n'
        '    idade INT,\n'
        '    email VARCHAR(100)\n'
        ');\n'
        '```'
        '**Motivo para usar `IF NOT EXISTS`**:\n\n'
        'O `IF NOT EXISTS` √© extremamente √∫til para garantir que, caso a tabela j√° tenha sido criada previamente, o comando n√£o gere um erro. '
        'Isso √© especialmente importante quando estamos trabalhando com scripts automatizados ou quando n√£o temos controle total sobre o estado do banco de dados.\n\n'
        '**Recomenda√ß√µes**:\n\n'
        '1. Use `IF NOT EXISTS` quando precisar garantir que uma tabela ser√° criada apenas uma vez, sem gerar erros em execu√ß√µes subsequentes.\n'
        '2. Ideal para ambientes de desenvolvimento ou scripts de inicializa√ß√£o de banco de dados que precisam ser executados v√°rias vezes.\n'
        '3. Utilize este comando em conjunto com a estrutura correta de tipos de dados e chaves prim√°rias para garantir a integridade dos dados.\n\n'
        '**Desrecomenda√ß√µes**:\n\n'
        '1. Evite o uso excessivo do `IF NOT EXISTS` em sistemas onde voc√™ tem controle total sobre a estrutura do banco de dados. '
        'Em alguns casos, √© mais apropriado verificar explicitamente a exist√™ncia de tabelas antes de executar o comando, para evitar que a cria√ß√£o da tabela passe despercebida.\n'
        '2. N√£o use `IF NOT EXISTS` quando estiver realizando altera√ß√µes estruturais, como adicionar ou excluir colunas. Em tais casos, o ideal √© usar comandos separados de `ALTER TABLE` para garantir que as altera√ß√µes sejam aplicadas corretamente.\n\n'
        '**Nota importante**:\n\n'
        'O `IF NOT EXISTS` n√£o impede a altera√ß√£o da tabela, apenas impede a cria√ß√£o de uma nova tabela com o mesmo nome. '
        'Se voc√™ tentar criar uma tabela com um nome j√° existente, o banco de dados simplesmente n√£o far√° nada e continuar√° normalmente, sem gerar erro.'
    )

@commands.command()
async def sql_database(ctx):
    await ctx.send(
        'O coelho da TI AJUDA SIM!\n\n'
        'Para criar o database √© muito facil. Basta seguir os passos abaixo:\n\n'
        'Embora alguns SGBDS, fa√ßam a cria√ß√£o sem precisar digitar c√≥digo algum, caso tu precise, agora vai saber\n'
        '``` create database nome_do_banco;````\n\n\n'
        'DE NADA')

@commands.command()
async def sql_delete(ctx):
    await ctx.send(
        'O coelho da TI AJUDA SIM!\n\n'
        'O comando `DELETE` √© utilizado para excluir dados de uma tabela. Para realizar um `DELETE`, voc√™ precisa seguir a seguinte estrutura:\n\n'
        '- Primeiro, voc√™ usa o comando `DELETE FROM`, seguido pelo nome da tabela de onde deseja excluir os dados.\n'
        '- Em seguida, voc√™ utiliza a cl√°usula `WHERE` para especificar qual registro ou registros deseja excluir.\n'
        '- Caso n√£o utilize a cl√°usula `WHERE`, **todos os dados da tabela ser√£o exclu√≠dos**, ent√£o √© importante utiliz√°-la com cuidado.\n\n'
        '**Exemplo**:\n\n'
        'Vamos imaginar que temos uma tabela chamada `CLIENTES` e queremos excluir o cliente com `id = 1`.\n\n'
        'A consulta seria:\n\n'
        '```sql\n'
        'DELETE FROM CLIENTES\n'
        'WHERE id = 1;\n'
        '```'
        '\nEssa consulta vai excluir o cliente da tabela `CLIENTES` que tem o `id` igual a 1.\n'
        'Lembre-se de que a cl√°usula `WHERE` √© fundamental para garantir que apenas o(s) registro(s) desejado(s) sejam exclu√≠dos. Se voc√™ n√£o usar `WHERE`, todos os registros da tabela ser√£o apagados!\n'
        'Ent√£o, tenha sempre cuidado ao executar o comando `DELETE`!')

@commands.command()
async def sql_update(ctx):
    await ctx.send(
        'O coelho da TI AJUDA SIM!\n\n'
        'Os comandos de `UPDATE` s√£o usados para atualizar dados em uma tabela existente. Para realizar um `UPDATE`, voc√™ precisa seguir a seguinte estrutura:\n\n'
        '- Primeiro, voc√™ usa o comando `UPDATE`, seguido pelo nome da tabela que deseja atualizar.\n'
        '- Em seguida, voc√™ utiliza o comando `SET`, onde voc√™ define os novos valores das colunas que deseja modificar.\n'
        '- Por √∫ltimo, voc√™ utiliza a cl√°usula `WHERE` para especificar a condi√ß√£o que os dados precisam atender para serem atualizados.\n\n'
        '**Exemplo**:\n\n'
        'Vamos imaginar que temos uma tabela chamada `CLIENTES`, e queremos atualizar o nome, idade e peso do cliente com `id = 1`.\n\n'
        'A consulta seria:\n\n'
        '```sql\n'
        'UPDATE CLIENTES\n'
        'SET nome = "Maria", idade = 30, peso = 65\n'
        'WHERE id = 1;\n'
        '```'
        '\nEssa consulta vai atualizar os dados de nome, idade e peso do cliente com o `id` igual a 1.\n'
        'Lembre-se de que a cl√°usula `WHERE` √© importante para garantir que apenas o registro desejado seja alterado. Se voc√™ n√£o utilizar `WHERE`, todos os registros da tabela ser√£o atualizados!'
    )

@commands.command()
async def sql_insert(ctx):
    await ctx.send(
        'O coelho da TI AJUDA SIM!\n\n'
        'Os comandos `INSERT INTO`, voc√™ precisa primeiro informar o comando `INSERT INTO`, logo em seguida o nome da tabela que deseja inserir os dados, '
        'e entre par√™nteses, as colunas nas quais deseja inserir os dados.\n\n'
        'Depois, voc√™ usa o comando `VALUES`, que corresponde aos valores que ser√£o inseridos em cada coluna.\n\n'
        'Exemplo:\n\n'
        '```sql\n'
        'INSERT INTO CLIENTES(nome, idade, peso) VALUES ("Jo√£o", 25, 80);\n'
        '```')

@commands.command()
async def sql_select(ctx):
    await ctx.send(
        'O coelho da TI AJUDA SIM!\n\n'
        'As consultas SELECT, voc√™ precisa primeiro informar o comando `SELECT`, logo em seguida as colunas que voc√™ deseja que sejam exibidas, '
        'e por fim, o comando `FROM`, e por √∫ltimo, o nome da tabela.\n\n'
        'Exemplo: Se eu tenho uma tabela chamada `clientes` e quero que sejam exibidas as colunas `nome`, `idade`, e `peso`, '
        'a consulta ser√°:\n\n'
        '```sql\n'
        'SELECT nome, idade, peso\n'
        'FROM clientes;\n'
        '```')

scripts_path = 'scripts/PostgreSQL'

@commands.command()
async def script(ctx):
    # Cria√ß√£o do bot√£o principal
    button = Button(label="Mostrar Scripts", style=discord.ButtonStyle.green)

    # Cria√ß√£o da View que ir√° conter os bot√µes
    view = View()
    view.add_item(button)

    # Envio da mensagem inicial
    await ctx.send("Temos esses scripts feitos para o banco PostgreSQL:", view=view)

    async def button_callback(interaction):
        if interaction.user == ctx.author:
            try:
                if not os.path.exists(scripts_path):
                    await interaction.response.send_message(
                        "A pasta de scripts n√£o foi encontrada.", ephemeral=True)
                    return

                scripts = os.listdir(scripts_path)
                scripts = [
                    s for s in scripts
                    if os.path.isfile(os.path.join(scripts_path, s))
                ]

                if not scripts:
                    await interaction.response.send_message(
                        "Nenhum script dispon√≠vel no momento.", ephemeral=True)
                else:
                    buttons = []
                    for script in scripts:
                        button = Button(
                            label=script,
                            style=discord.ButtonStyle.primary,
                            custom_id=script
                        )
                        buttons.append(button)

                    view = View()
                    for button in buttons:
                        view.add_item(button)

                    await interaction.response.send_message(
                        "Escolha um script para baixar:", view=view)

                    async def script_button_callback(interaction):
                        if interaction.user == ctx.author:
                            script_name = interaction.data["custom_id"]

                            script_file_path = os.path.join(scripts_path, script_name)

                            if os.path.exists(script_file_path):
                                await interaction.response.send_message(
                                    file=discord.File(script_file_path),
                                    content=f"Aqui est√° o script solicitado: {script_name}"
                                )
                            else:
                                await interaction.response.send_message(
                                    "Ocorreu um erro ao tentar acessar o script.", ephemeral=True)
                        else:
                            await interaction.response.send_message(
                                "Voc√™ n√£o tem permiss√£o para ver este script.", ephemeral=True)

                    for button in buttons:
                        button.callback = script_button_callback

            except Exception as e:
                await interaction.response.send_message(
                    f"Ocorreu um erro ao tentar carregar os scripts: {e}",
                    ephemeral=True)
        else:
            await interaction.response.send_message(
                "Voc√™ n√£o tem permiss√£o para ver os scripts.", ephemeral=True)

    button.callback = button_callback